/////////////////////////////model///////////////////////////
package com.infobeans.model;

public class Student {

	private int id ;
	private String name ;
	private int age ;
	private String department;
	
	public Student ( int id , String name , int age ,String department )
{ this.id = id ;
this.name = name;
this .age = age ;
this.department = department;		
	}
	
	public int getId ()
	{
		return id ;
	}
	public String getName ()
	{
		return name ;
	}
	public int getage ()
	{
		return age ;
	}
	public String getdepartment ()
	{
		return department;
	}
	public void setId (int id )
	{
		this.id = id ;
	}
	public void setName (String Name)
	{
		this.name = name ;
	}
	public void setAge (int age )
	{
		this.age = age ;
	}
	public void setDepartment ( String department)
	{
		this.department= department;
	}
}
/////////////////////////////////////////////////////////Dao//////////////////////////////////////
package com.infobeans.dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.infobeans.model.Student;

public class StudentDao {

	private static final String Url ="jdbc:mysql://localhost:3306/student_management?useSSL=false&serverTimezone=UTC";
	private static final String User = "root";
	private static final String password = "root";
	private Connection getConnection () throws SQLException
	{
		return DriverManager.getConnection(Url, User, password);
	}
	// insert a student into the database;
	public void insertstudent (Student student) throws SQLException
	{
		String sql = "insert into student(id , name , age , department) values (?, ?,?, ?)";
		try(Connection con = getConnection ())
		{ PreparedStatement pst = con.prepareStatement(sql);
		pst.setInt(1, student.getId());
		pst.setString(2, student.getName());
		pst.setInt(3, student.getage());
		pst.setString(4, student.getdepartment());
		pst.executeUpdate();
			
		}
	}
	
	// retrieves all list
	public List <Student>getAllstudents () throws SQLException
	{
		List <Student> students = new ArrayList<>();
		String sql = "select * from  student";
		try (Connection conn = getConnection ())
		{ Statement st= conn.createStatement();
		ResultSet rs =st.executeQuery(sql);
		while (rs.next())
		{
			int id = rs.getInt("id");
			String name = rs.getString("name");
			int age =rs.getInt("age");
			String department = rs.getString("department");
			Student student = new Student(id , name , age , department);
			students.add(student);
			
		}
			
		}
		return students;
	}
	public Student findById(int id ) throws SQLException
	{
		String sql = " select * from student where id =?"; 
		try ( Connection con3 = getConnection ())
				{
					PreparedStatement pst1= con3.prepareStatement(sql);
					pst1.setInt(1,id );
					ResultSet rs= pst1.executeQuery();
					if (rs.next())
					{
						int studentid= rs.getInt("id");
						String name = rs.getString("name");
						int age = rs.getInt("age");
						String department = rs.getString ("department");
						return new Student ( studentid , name , age , department );
						
					}
					
				}
return null;		
	}
	public Student  deletebyId(int id ) throws SQLException
	{
		
		String sql = "delete  from student where id = ?";
		try (Connection con4 = getConnection ())
		{
			PreparedStatement pst2= con4.prepareStatement(sql);
			pst2.setInt(1 , id);
		int rowsaffected =	pst2.executeUpdate();
		if ( rowsaffected >0)
		{
			System.out.println ("records with id  "+id +" deleted successfully");

		}
		else 
		{
			System.out.println ("records with id  "+id +" Nothing to delete ");

		}
					
		}
		return null;}
	public void updatebyname (String oldname, String newname ) throws SQLException
	{
		String sql = "update   student set name =? where name =?";
		try( Connection con5 =getConnection())
		{
		PreparedStatement pst5 =con5.prepareStatement(sql);
		pst5.setString (1, newname);
		pst5.setString (2, oldname);

		int rowsaffected =	pst5.executeUpdate();
		if ( rowsaffected >0)
		{
			System.out.println ("records with name "+oldname +" updated to "+newname+"successfully");

		}
		else 
		{
			System.out.println ("No records found with name '" + oldname + "'. Nothing to update.");

		}
		
		}
	}
	public void updatenameid ( int id , String name ) throws SQLException
	{
		String sql = "update student  set name = ? where id =? ";
		try ( Connection con6 = getConnection ())
		{
			PreparedStatement pst6= con6.prepareStatement(sql);
					pst6.setString(1 , name); 
			        pst6.setInt(2, id);
			        int rowsaffected =	pst6.executeUpdate();
					if ( rowsaffected >0)
					{
						System.out.println ("records with id "+id +" updated to "+name+"successfully");

					}
					else 
					{
						System.out.println ("No records found with id '" + id + "'. Nothing to update.");

					}
					
					}
			        
		}
	public void order() throws SQLException
	{
		String sql = " select  id ,name, age, department  from student  order by name ";
		try ( Connection con8 = getConnection ())
		{
	        PreparedStatement pst8 = con8.prepareStatement(sql);

			ResultSet rs = pst8.executeQuery();
			while ( rs.next())
			{
				int studentidd= rs.getInt("id");
				String namee = rs.getString("name");
				int age = rs.getInt("age");
				String departmentt = rs.getString ("department");
				System.out.println(studentidd + " | " + namee + " | " + age + " | " + departmentt);

			}

			
			
		}
	}
	
	
	

}
///////////////////////////////////////Service////////////////////////////////
package com.infobeans.service;

import java.sql.SQLException;
import java.util.List;

import com.infobeans.dao.StudentDao;
import com.infobeans.model.Student;

public class StudentService {
	private static final String String = null;
	private StudentDao studentDao;
	
	public StudentService()
	{
		this.studentDao = new StudentDao();
	}
	public void addStudent(Student student) throws SQLException
	{
		studentDao.insertstudent(student);
	} 
	public List <Student>fetchAllStudents() throws SQLException
	{
		return studentDao.getAllstudents()
;	}
	public void FetchId(int id) throws SQLException {
	    Student student = studentDao.findById(id);
	    
	    if (student != null) {
	        System.out.println("Student Found: " + 
	            student.getId() + " | " + 
	            student.getName() + " | " + 
	            student.getage() + " | " + 
	            student.getdepartment());
	    } else {
	        System.out.println("Student not found.");
	    }
	}
	public void DeleteId(int id ) throws SQLException
	{
		studentDao.deletebyId(id);
		
		
	}
	public void UpdateStuName(String oldname, String newname) throws SQLException
	{
		studentDao.updatebyname(oldname,  newname);
	}
	public void UpdateIdName (int id , String name ) throws SQLException
	{
		studentDao.updatenameid(id, name);
	}
	public void orderasc() throws SQLException
	{
		studentDao.order();
	}

}
/////////////////////////Main//////////////////////////

package com.infobeans.main;

import java.sql.SQLException;
import java.util.List;
import java.util.Scanner;

import com.infobeans.model.Student;
import com.infobeans.service.StudentService;

public class MainApp {
public static void main ( String [] args) throws SQLException
{
	Scanner scn = new Scanner(System.in);
	StudentService studentservice = new StudentService ();
	while (true)
	{
		System.out.println ("Enter 1 to add student  , enter 2 view students, enter 3 to exit , enter 4 to fectch by id , enter 5 to delete by id, enter 6 to update by name, enter 7 to update name by id  , enter 8 fetch data in ascending order by name");
		System.out.println ( "Enter your choice");
		int choice = scn.nextInt ();
		switch(choice)
		{
		case 1: System.out.println ( " Enter id ");
		int id = scn.nextInt ();
		scn.nextLine ();
		System.out.println ( " Enter Name ");
		String name = scn.nextLine ();
		System.out.println ( " Enter aGE");
        int age = scn.nextInt();
        scn.nextLine ();
        System.out.print("Enter Department: ");
String department = scn.nextLine ();
Student student = new Student (id , name , age , department);
studentservice.addStudent(student);


        break;
		case 2 : List <Student> students = studentservice.fetchAllStudents();
		System.out.println ( " student list");
		for (Student s : students)
		{
            System.out.println(s.getId() + " | " + s.getName() + " | " + s.getage() + " | " + s.getdepartment());

		}
		break;
		case 3: 
			System.out.println (" Existing...");
			break;
		case 4:
			System.out.println ("Enter student id to search");
			int idd = scn.nextInt();
			studentservice.FetchId(idd );
			break;
		case 5 :
			System.out.println (" Enter studentid to delte record ");
			int did= scn.nextInt ();
			studentservice.DeleteId(did);
			break;
		case 6:			scn.nextLine ();

			System.out.println ( " Enter current student name to update");
			String oldname= scn.nextLine ();
			System.out.println ("Enter new  student name :" );
				String newname= scn.nextLine ();
				studentservice.UpdateStuName(oldname, newname);
				break;
		case 7: scn.nextLine ();
		System.out.println ( " Enter current id to update name");
		int Uid = scn.nextInt();
		scn.nextLine();
		System.out.println ("Enter new  student name :" );
		String newnamee= scn.nextLine ();

		studentservice.UpdateIdName(Uid, newnamee);
		break;
		case 8 : System.out.println ( " data in ascending order by name");
		studentservice.orderasc();
		break;
			default:
                System.out.println("Invalid choice. Try again.");

		}
	}
}
}

